"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã

–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Forex –∏ Crypto —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
"""

from trading_system_base import *
from multi_timeframe_analysis import *
from risk_position_management import *
from forex_strategy import ForexStrategy
from crypto_strategy import CryptoStrategy
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def generate_sample_data(timeframe: TimeFrame, periods: int = 1000) -> pd.DataFrame:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    if timeframe == TimeFrame.M5:
        base_price = 50000.0  # –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        volatility = 0.02
    elif timeframe == TimeFrame.H1:
        base_price = 1.1000   # –î–ª—è Forex
        volatility = 0.005
    else:
        base_price = 1.1000
        volatility = 0.001
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ç—Ä–µ–Ω–¥–æ–º
    np.random.seed(42)
    
    dates = pd.date_range(start=datetime.now() - timedelta(days=periods//24), 
                         periods=periods, freq='5min')
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–Ω —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
    returns = np.random.normal(0, volatility, periods)
    trend = np.linspace(0, 0.1, periods)  # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
    
    prices = [base_price]
    for i in range(1, periods):
        new_price = prices[-1] * (1 + returns[i] + trend[i]/periods)
        prices.append(new_price)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö
    data = []
    for i, price in enumerate(prices):
        high = price * (1 + abs(np.random.normal(0, volatility/2)))
        low = price * (1 - abs(np.random.normal(0, volatility/2)))
        open_price = prices[i-1] if i > 0 else price
        close_price = price
        volume = np.random.uniform(1000, 10000)
        
        data.append({
            'timestamp': dates[i],
            'open': open_price,
            'high': max(open_price, high, close_price),
            'low': min(open_price, low, close_price),
            'close': close_price,
            'volume': volume
        })
    
    df = pd.DataFrame(data)
    df.set_index('timestamp', inplace=True)
    return df

def test_forex_strategy():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Forex —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FOREX –°–¢–†–ê–¢–ï–ì–ò–ò")
    print("="*60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    forex_strategy = ForexStrategy()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    test_data = {
        TimeFrame.H4: generate_sample_data(TimeFrame.H4, 500),
        TimeFrame.H1: generate_sample_data(TimeFrame.H1, 1000),
        TimeFrame.M15: generate_sample_data(TimeFrame.M15, 2000)
    }
    
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(test_data)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
    symbol = "EUR/USD"
    signal = forex_strategy.analyze_market(test_data, symbol)
    
    if signal:
        print(f"\n‚úÖ –°–ò–ì–ù–ê–õ –ù–ê–ô–î–ï–ù –¥–ª—è {symbol}:")
        print(f"   –¢–∏–ø: {signal.signal_type.value}")
        print(f"   –í—Ö–æ–¥: {signal.entry_price:.5f}")
        print(f"   –°—Ç–æ–ø: {signal.stop_loss:.5f}")
        print(f"   –¶–µ–ª–∏: {[f'{tp:.5f}' for tp in signal.take_profit]}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2%}")
        print(f"   R/R: {signal.risk_reward_ratio:.2f}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        account_balance = 10000.0
        position_size = forex_strategy.calculate_position_size(signal, account_balance)
        print(f"   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size:.2f} –ª–æ—Ç–æ–≤")
        
    else:
        print(f"\n‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {symbol}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    recommendations = forex_strategy.get_trading_recommendations()
    print(f"\nüìä –¢–û–†–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print(f"   –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è: {recommendations['current_session']['name']}")
    print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–∞—Ä—ã: {recommendations['recommended_pairs']}")
    print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {recommendations['risk_level']}")
    print(f"   –ó–¥–æ—Ä–æ–≤—å–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {recommendations['portfolio_health']}")
    
    if recommendations['avoid_trading']:
        print(f"   ‚ö†Ô∏è  –ò–∑–±–µ–≥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª–∏: {recommendations['avoid_reason']}")

def test_crypto_strategy():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Crypto —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CRYPTO –°–¢–†–ê–¢–ï–ì–ò–ò")
    print("="*60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    crypto_strategy = CryptoStrategy()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
    test_data = {
        TimeFrame.H1: generate_sample_data(TimeFrame.H1, 500),
        TimeFrame.M15: generate_sample_data(TimeFrame.M15, 1000),
        TimeFrame.M5: generate_sample_data(TimeFrame.M5, 2000)
    }
    
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(test_data)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
    symbol = "BTC/USDT"
    signal = crypto_strategy.analyze_market(test_data, symbol)
    
    if signal:
        print(f"\n‚úÖ –°–ò–ì–ù–ê–õ –ù–ê–ô–î–ï–ù –¥–ª—è {symbol}:")
        print(f"   –¢–∏–ø: {signal.signal_type.value}")
        print(f"   –í—Ö–æ–¥: ${signal.entry_price:,.2f}")
        print(f"   –°—Ç–æ–ø: ${signal.stop_loss:,.2f}")
        print(f"   –¶–µ–ª–∏: {[f'${tp:,.2f}' for tp in signal.take_profit]}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2%}")
        print(f"   R/R: {signal.risk_reward_ratio:.2f}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        account_balance = 50000.0
        position_size = crypto_strategy.calculate_position_size(signal, account_balance)
        print(f"   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size:.6f} BTC")
        
    else:
        print(f"\n‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {symbol}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞
    market_state = crypto_strategy.get_crypto_market_state()
    print(f"\nüìä –°–û–°–¢–û–Ø–ù–ò–ï –ö–†–ò–ü–¢–û –†–´–ù–ö–ê:")
    print(f"   –§–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Ä–∏—Å–∫–∞: {market_state['news_risk_factor']:.2%}")
    print(f"   –ü–µ—Ä–∏–æ–¥ –≤—ã—Å–æ–∫–æ–≥–æ –≤–ª–∏—è–Ω–∏—è: {market_state['high_impact_period']}")
    print(f"   –ü—Ä–∏—á–∏–Ω–∞: {market_state['impact_reason']}")
    print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–¥–µ–ª–æ–∫: {market_state['daily_trades_used']}/{crypto_strategy.max_daily_trades}")
    print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {market_state['recommended_action']}")

def demonstrate_risk_management():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ò–°–ö–ê–ú–ò")
    print("="*60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Forex
    forex_config = MarketConfig(MarketType.FOREX)
    risk_manager = RiskManager(forex_config)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    signal = Signal(
        timestamp=datetime.now(),
        signal_type=SignalType.BUY,
        entry_price=1.1000,
        stop_loss=1.0950,
        take_profit=[1.1050, 1.1100, 1.1150],
        confidence=0.75,
        timeframe_analysis={},
        risk_reward_ratio=2.0
    )
    
    # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
    account_balance = 10000.0
    current_price = 1.1000
    atr_value = 0.0020
    
    position_sizing = risk_manager.calculate_position_size(
        signal, account_balance, current_price, atr_value
    )
    
    print(f"üí∞ –†–ê–°–ß–ï–¢ –†–ê–ó–ú–ï–†–ê –ü–û–ó–ò–¶–ò–ò:")
    print(f"   –ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞: ${account_balance:,.2f}")
    print(f"   –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {forex_config.risk_per_trade:.1%}")
    print(f"   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_sizing.position_size:.2f} –ª–æ—Ç–æ–≤")
    print(f"   –°—É–º–º–∞ —Ä–∏—Å–∫–∞: ${position_sizing.risk_amount:.2f}")
    print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: {position_sizing.max_loss_pips:.1f} –ø–∏–ø—Å–æ–≤")
    print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏: ${position_sizing.position_value:,.2f}")
    print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ø–ª–µ—á–æ: {position_sizing.leverage_used:.1f}x")
    print(f"   –¢—Ä–µ–±—É–µ–º–∞—è –º–∞—Ä–∂–∞: ${position_sizing.margin_required:,.2f}")

def demonstrate_pattern_detection():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    print("\n" + "="*60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–ï–¢–ï–ö–¶–ò–ò –ü–ê–¢–¢–ï–†–ù–û–í")
    print("="*60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    config = MarketConfig(MarketType.FOREX)
    pattern_detector = PatternDetector(config)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
    data = generate_sample_data(TimeFrame.M15, 200)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    analysis = TimeframeAnalysis(
        timeframe=TimeFrame.M15,
        trend_direction='bullish',
        structure_quality=0.8,
        orderflow_score=0.75,
        key_levels=[1.0950, 1.1000, 1.1050, 1.1100],
        premium_discount_zones={'premium': (1.1080, 1.1120), 'discount': (1.0980, 1.1020)},
        imbalances=[
            {'type': 'bullish', 'upper_level': 1.1030, 'lower_level': 1.1020, 'strength': 0.7},
            {'type': 'bullish', 'upper_level': 1.1070, 'lower_level': 1.1060, 'strength': 0.6}
        ],
        fractals={'resistance': [1.1100], 'support': [1.0950]}
    )
    
    # –î–µ—Ç–µ–∫—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ AMD
    amd_pattern = pattern_detector.detect_amd_pattern(data, analysis)
    
    if amd_pattern:
        print(f"üéØ –ü–ê–¢–¢–ï–†–ù AMD –û–ë–ù–ê–†–£–ñ–ï–ù:")
        print(f"   –¢–∏–ø –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {amd_pattern['pattern']}")
        print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {amd_pattern['distribution_direction']}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {amd_pattern['confidence']:.2%}")
        print(f"   –ó–æ–Ω–∞ –≤—Ö–æ–¥–∞: {amd_pattern['entry_zone']['entry_price']:.5f}")
        print(f"   –°—Ç–æ–ø-–ª–æ—Å—Å: {amd_pattern['entry_zone']['stop_loss']:.5f}")
    else:
        print("‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω AMD –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
    
    # –î–µ—Ç–µ–∫—Ü–∏—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ Orderflow
    orderflow = pattern_detector.detect_healthy_orderflow(data, 'bullish')
    
    print(f"\nüìà –ê–ù–ê–õ–ò–ó ORDERFLOW:")
    print(f"   –ó–¥–æ—Ä–æ–≤—ã–π –ø–æ—Ç–æ–∫: {'–î–∞' if orderflow['healthy'] else '–ù–µ—Ç'}")
    print(f"   –û—Ü–µ–Ω–∫–∞: {orderflow['score']:.2%}")
    print(f"   –î–µ—Ç–∞–ª–∏: {orderflow.get('details', '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π')}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ê–Ø –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê")
    print("–ê–≤—Ç–æ—Ä: Manus AI (–ê–ª–≥–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç)")
    print("–í–µ—Ä—Å–∏–∏: Forex (–Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å) + Crypto (–≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        demonstrate_pattern_detection()
        demonstrate_risk_management()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        test_forex_strategy()
        test_crypto_strategy()
        
        print("\n" + "="*60)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û")
        print("="*60)
        
        print("\nüìã –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –°–ò–°–¢–ï–ú–´:")
        print("   ‚Ä¢ –ú–Ω–æ–≥–æ—Ç–∞–π–º—Ñ—Ä–µ–π–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (3 —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞)")
        print("   ‚Ä¢ –î–µ—Ç–µ–∫—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ AMD –∏ –∑–¥–æ—Ä–æ–≤–æ–≥–æ Orderflow")
        print("   ‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏")
        print("   ‚Ä¢ Forex: —É—á–µ—Ç —Å–µ—Å—Å–∏–æ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
        print("   ‚Ä¢ Crypto: –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –≤—ã—Å–æ–∫—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
        print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏")
        print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()

